/**********************************************************************
 Java CUP specification for a parser for Simple programs
 **********************************************************************/

import java_cup.runtime.*;

parser code {:

public void syntax_error(Symbol currToken) {
    Errors.fatal(((TokenVal)currToken.value).linenum,
	         ((TokenVal)currToken.value).charnum,
		 "Syntax error");
}

:};


/* Terminals (tokens returned by the scanner) */
terminal TokenVal       PUBLIC;
terminal TokenVal       CLASS;
terminal TokenVal       STATIC;
terminal TokenVal       INT;
terminal TokenVal       BOOLEAN;
terminal TokenVal       STRING;
terminal TokenVal       VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal TokenVal       IF;
terminal TokenVal       ELSE;
terminal TokenVal       WHILE;
terminal TokenVal 		DO;
terminal TokenVal       PRINT;
terminal TokenVal       RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StringTokenVal STRINGLITERAL;
terminal TokenVal       LCURLY;
terminal TokenVal       RCURLY;
terminal TokenVal       LPAREN;
terminal TokenVal       RPAREN;
terminal TokenVal       COMMA;
terminal TokenVal       ASSIGN;
terminal TokenVal       SEMICOLON;
terminal TokenVal       PLUS;
terminal TokenVal       MINUS;
terminal TokenVal       TIMES;
terminal TokenVal       DIVIDE;
terminal TokenVal       NOT;
terminal TokenVal       AND;
terminal TokenVal       OR;
terminal TokenVal       EQUALS;
terminal TokenVal       NOTEQUALS;
terminal TokenVal       LESS;
terminal TokenVal       GREATER;
terminal TokenVal       LESSEQ;
terminal TokenVal       GREATEREQ;
terminal TokenVal	    SWITCH;
terminal TokenVal	    CASE;
terminal TokenVal	    DEFAULT;
terminal TokenVal	    UMINUS;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal ClassBodyNode    classBody;
non terminal Sequence         declList;
non terminal DeclNode	      decl;
non terminal FieldDeclNode    fieldDecl;
non terminal TypeNode	      type;
non terminal IdNode	      id;
non terminal MethodDeclNode   methodDecl;
non terminal FormalsListNode  formals;
non terminal FormalDeclNode 	  formalDecl;
non terminal Sequence		  formalsList;
non terminal MethodBodyNode   methodBody;
non terminal Sequence		  varDeclList;
non terminal VarDeclNode	  varDecl;
 
/* Precedences */
precedence left AND, OR;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT, UMINUS;

start with program;

/*
 * grammar with actions
 *
 * add more here
 */
program		::= PUBLIC CLASS id:i LCURLY classBody:c RCURLY
		{: RESULT = new ProgramNode(i, c);
		:}
		;

classBody	::= declList:d
		{: RESULT = new ClassBodyNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addToEnd(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new Sequence();
		:}
		;

decl		::= fieldDecl:v
		{: RESULT = v;
		:}
		| methodDecl:m
		{: RESULT = m;
		:}
		;

fieldDecl	::= STATIC type:t id:i SEMICOLON
		{: RESULT = new FieldDeclNode(t, i);
		:}
		;

 methodDecl ::= PUBLIC STATIC VOID id:i formals:f methodBody:mb 
		{: RESULT = new MethodDeclNode(i, f, mb);
		:}
		| PUBLIC STATIC INT id:i formals:f methodBody:mb
		{: RESULT = new MethodDeclNode(i, f, mb);
		:}
		;

formals ::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(new Sequence());
		:}
		| LPAREN formalsList:fl RPAREN
		{: RESULT = new FormalsListNode(fl);
		:}
		;

formalsList ::= formalDecl:fd
              {: Sequence seq = new Sequence();
			  	seq.addToEnd(fd);
				RESULT = seq; 
              :}
              | formalDecl:fd COMMA formalsList:fl
              {: fl.addToFront(fd); 
			  	RESULT = fl;
              :}
              ;

formalDecl ::= type:t id:i
             {: RESULT = new FormalDeclNode(t, i); 
             :}
             ;
methodBody ::= LCURLY varDeclList RCURLY;
//this does not work yet since the constructor for the mehtodBody has not yet been called
varDeclList ::= varDeclList:vdl varDecl:vd
		{: vdl.addToEnd(vd);
		   RESULT = vdl;
		:}
		| /* epsilon */
		{: RESULT = new Sequence();
		:}
		;

varDecl ::= type:t id:i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;
	

type		::= INT
		{: RESULT = new IntNode();
		:}
		| BOOLEAN
		{: RESULT = new BooleanNode();
		:}
		| STRING
		{: RESULT = new StringNode();
		:}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
